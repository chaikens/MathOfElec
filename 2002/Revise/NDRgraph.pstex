%!PS-Adobe-2.0 EPSF-2.0
%%Title: NDRgraph.pstex
%%Creator: fig2dev Version 3.2 Patchlevel 1
%%CreationDate: Sat Oct 27 22:19:05 2001
%%For: sdc@omnibook (S.Chaiken)
%%Orientation: Portrait
%%BoundingBox: 0 0 334 86
%%Pages: 0
%%BeginSetup
%%EndSetup
%%Magnification: 1.0000
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
-64.0 267.0 translate
1 -1 scale
.9 .9 scale % to make patterns same scale as in xfig

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index show		% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% vertical sawtooth lines
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 16 32 true [ 16 0 0 -32 0 32 ]
	{<400020001000080004000200010000800100020004000800
	100020004000800040002000100008000400020001000080
	01000200040008001000200040008000>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P22 exch def
1.1111 1.1111 scale %restore scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/reencdict 12 dict def /ReEncode { reencdict begin
/newcodesandnames exch def /newfontname exch def /basefontname exch def
/basefontdict basefontname findfont def /newfont basefontdict maxlength dict def
basefontdict { exch dup /FID ne { dup /Encoding eq
{ exch dup length array copy newfont 3 1 roll put }
{ exch newfont 3 1 roll put } ifelse } { pop pop } ifelse } forall
newfont /FontName newfontname put newcodesandnames aload pop
128 1 255 { newfont /Encoding get exch /.notdef put } for
newcodesandnames length 2 idiv { newfont /Encoding get 3 1 roll put } repeat
newfontname newfont definefont pop end } def
/isovec [
8#200 /grave 8#201 /acute 8#202 /circumflex 8#203 /tilde
8#204 /macron 8#205 /breve 8#206 /dotaccent 8#207 /dieresis
8#210 /ring 8#211 /cedilla 8#212 /hungarumlaut 8#213 /ogonek 8#214 /caron
8#220 /dotlessi 8#230 /oe 8#231 /OE
8#240 /space 8#241 /exclamdown 8#242 /cent 8#243 /sterling
8#244 /currency 8#245 /yen 8#246 /brokenbar 8#247 /section 8#250 /dieresis
8#251 /copyright 8#252 /ordfeminine 8#253 /guillemotleft 8#254 /logicalnot
8#255 /endash 8#256 /registered 8#257 /macron 8#260 /degree 8#261 /plusminus
8#262 /twosuperior 8#263 /threesuperior 8#264 /acute 8#265 /mu 8#266 /paragraph
8#267 /periodcentered 8#270 /cedilla 8#271 /onesuperior 8#272 /ordmasculine
8#273 /guillemotright 8#274 /onequarter 8#275 /onehalf
8#276 /threequarters 8#277 /questiondown 8#300 /Agrave 8#301 /Aacute
8#302 /Acircumflex 8#303 /Atilde 8#304 /Adieresis 8#305 /Aring
8#306 /AE 8#307 /Ccedilla 8#310 /Egrave 8#311 /Eacute
8#312 /Ecircumflex 8#313 /Edieresis 8#314 /Igrave 8#315 /Iacute
8#316 /Icircumflex 8#317 /Idieresis 8#320 /Eth 8#321 /Ntilde 8#322 /Ograve
8#323 /Oacute 8#324 /Ocircumflex 8#325 /Otilde 8#326 /Odieresis 8#327 /multiply
8#330 /Oslash 8#331 /Ugrave 8#332 /Uacute 8#333 /Ucircumflex
8#334 /Udieresis 8#335 /Yacute 8#336 /Thorn 8#337 /germandbls 8#340 /agrave
8#341 /aacute 8#342 /acircumflex 8#343 /atilde 8#344 /adieresis 8#345 /aring
8#346 /ae 8#347 /ccedilla 8#350 /egrave 8#351 /eacute
8#352 /ecircumflex 8#353 /edieresis 8#354 /igrave 8#355 /iacute
8#356 /icircumflex 8#357 /idieresis 8#360 /eth 8#361 /ntilde 8#362 /ograve
8#363 /oacute 8#364 /ocircumflex 8#365 /otilde 8#366 /odieresis 8#367 /divide
8#370 /oslash 8#371 /ugrave 8#372 /uacute 8#373 /ucircumflex
8#374 /udieresis 8#375 /yacute 8#376 /thorn 8#377 /ydieresis] def
/Times-Roman /Times-Roman-iso isovec ReEncode
/Helvetica-Bold /Helvetica-Bold-iso isovec ReEncode
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def
%%EndProlog

$F2psBegin
10 setmiterlimit
n -1000 5437 m -1000 -1000 l 7619 -1000 l 7619 5437 l cp clip
 0.06000 0.06000 sc
30.000 slw
% Ellipse
n 2077 4192 35 35 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P22 [8 0 0 -16 136.13 277.13]  PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 3995 3867 35 35 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P22 [8 0 0 -16 264.00 255.47]  PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 2255 3627 35 35 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P22 [8 0 0 -16 148.00 239.47]  PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 2307 3087 35 35 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P22 [8 0 0 -16 151.47 203.47]  PATmp PATsp ef gr PATusp gs col0 s gr

% Polyline
7.500 slw
 [60] 0 sd
gs  clippath
1245 3200 m 1275 3080 l 1305 3200 l 1305 3065 l 1245 3065 l cp
clip
n 1275 4425 m 1275 3080 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 1245 3200 m 1275 3080 l 1305 3200 l  col0 s
% Polyline
 [60] 0 sd
gs  clippath
4380 4320 m 4500 4350 l 4380 4380 l 4515 4380 l 4515 4320 l cp
clip
n 1200 4350 m 4500 4350 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 4380 4320 m 4500 4350 l 4380 4380 l  col0 s
% Polyline
30.000 slw
gs  clippath
2402 4097 m 2525 4107 l 2411 4156 l 2574 4129 l 2565 4070 l cp
clip
n 2105 4176 m 2525 4107 l gs col0 s gr gr

% arrowhead
7.500 slw
n 2402 4097 m 2525 4107 l 2411 4156 l 2407 4126 l 2402 4097 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
30.000 slw
gs  clippath
3965 3704 m 3995 3584 l 4025 3704 l 4025 3539 l 3965 3539 l cp
clip
n 3995 3864 m 3995 3584 l gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P22 [8 0 0 -16 266.33 238.93]  PATmp PATsp ef gr PATusp gs col0 s gr gr

% arrowhead
7.500 slw
n 3965 3704 m 3995 3584 l 4025 3704 l 3995 3704 l 3965 3704 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
30.000 slw
gs  clippath
3597 3897 m 3627 3777 l 3657 3897 l 3657 3732 l 3597 3732 l cp
clip
n 3627 4005 m 3627 3777 l gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P22 [8 0 0 -16 241.80 251.80]  PATmp PATsp ef gr PATusp gs col0 s gr gr

% arrowhead
7.500 slw
n 3597 3897 m 3627 3777 l 3657 3897 l 3627 3897 l 3597 3897 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
30.000 slw
gs  clippath
1755 3582 m 1640 3537 l 1763 3522 l 1599 3502 l 1592 3561 l cp
clip
n 2233 3611 m 1640 3537 l gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P22 [8 0 0 -16 109.33 235.80]  PATmp PATsp ef gr PATusp gs col0 s gr gr

% arrowhead
7.500 slw
n 1755 3582 m 1640 3537 l 1763 3522 l 1759 3552 l 1755 3582 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
30.000 slw
gs  clippath
2600 3192 m 2720 3222 l 2600 3252 l 2765 3252 l 2765 3192 l cp
clip
n 1498 3222 m 2720 3222 l gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P22 [8 0 0 -16 99.87 214.80]  PATmp PATsp ef gr PATusp gs col0 s gr gr

% arrowhead
7.500 slw
n 2600 3192 m 2720 3222 l 2600 3252 l 2600 3222 l 2600 3192 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
30.000 slw
gs  clippath
2664 3065 m 2784 3095 l 2664 3125 l 2829 3125 l 2829 3065 l cp
clip
n 2344 3095 m 2784 3095 l gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P22 [8 0 0 -16 156.27 206.33]  PATmp PATsp ef gr PATusp gs col0 s gr gr

% arrowhead
7.500 slw
n 2664 3065 m 2784 3095 l 2664 3125 l 2664 3095 l 2664 3065 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
n 1275 4350 m 1276 4350 l 1279 4349 l 1283 4347 l 1291 4345 l 1301 4342 l
 1314 4338 l 1330 4333 l 1350 4327 l 1371 4321 l 1396 4314 l
 1422 4307 l 1450 4300 l 1480 4293 l 1512 4285 l 1546 4278 l
 1582 4270 l 1621 4262 l 1664 4254 l 1711 4246 l 1762 4237 l
 1820 4227 l 1850 4222 l 1881 4217 l 1915 4212 l 1950 4206 l
 1987 4201 l 2027 4195 l 2068 4189 l 2111 4183 l 2157 4176 l
 2204 4170 l 2254 4163 l 2305 4156 l 2358 4149 l 2413 4142 l
 2470 4135 l 2527 4128 l 2586 4120 l 2646 4112 l 2707 4105 l
 2768 4097 l 2830 4089 l 2892 4081 l 2954 4074 l 3016 4066 l
 3078 4058 l 3139 4050 l 3199 4042 l 3258 4034 l 3316 4027 l
 3372 4019 l 3427 4012 l 3480 4004 l 3531 3997 l 3579 3989 l
 3626 3982 l 3670 3975 l 3711 3968 l 3749 3962 l 3785 3955 l
 3818 3948 l 3847 3942 l 3874 3936 l 3898 3930 l 3918 3924 l
 3935 3918 l 3950 3912 l 3967 3903 l 3976 3895 l 3979 3887 l
 3976 3879 l 3966 3871 l 3950 3863 l 3928 3855 l 3901 3847 l
 3869 3839 l 3833 3832 l 3793 3824 l 3751 3817 l 3705 3809 l
 3658 3802 l 3609 3795 l 3560 3787 l 3511 3780 l 3462 3773 l
 3413 3766 l 3366 3759 l 3321 3753 l 3278 3746 l 3237 3740 l
 3199 3734 l 3163 3728 l 3130 3722 l 3099 3717 l 3071 3711 l
 3045 3707 l 3020 3702 l 2988 3696 l 2957 3691 l 2928 3687 l
 2901 3683 l 2875 3680 l 2851 3677 l 2827 3675 l 2805 3673 l
 2783 3672 l 2762 3671 l 2742 3669 l 2721 3668 l 2701 3667 l
 2680 3666 l 2659 3665 l 2638 3663 l 2615 3662 l 2593 3660 l
 2569 3658 l 2545 3655 l 2520 3653 l 2495 3650 l 2472 3647 l
 2448 3645 l 2424 3642 l 2399 3640 l 2375 3637 l 2350 3634 l
 2324 3632 l 2299 3629 l 2273 3626 l 2247 3624 l 2221 3621 l
 2195 3618 l 2169 3616 l 2143 3613 l 2117 3610 l 2092 3607 l
 2066 3605 l 2042 3602 l 2017 3599 l 1993 3595 l 1969 3592 l
 1946 3589 l 1924 3586 l 1902 3582 l 1876 3578 l 1851 3573 l
 1826 3568 l 1801 3564 l 1776 3559 l 1752 3554 l 1727 3549 l
 1702 3544 l 1677 3539 l 1653 3534 l 1629 3529 l 1605 3524 l
 1582 3519 l 1560 3514 l 1539 3508 l 1519 3502 l 1500 3496 l
 1482 3490 l 1466 3484 l 1452 3477 l 1435 3467 l 1421 3456 l
 1409 3444 l 1399 3432 l 1390 3419 l 1383 3406 l 1377 3392 l
 1371 3379 l 1367 3365 l 1364 3352 l 1362 3340 l 1362 3327 l
 1364 3316 l 1370 3305 l 1378 3296 l 1388 3287 l 1401 3278 l
 1415 3269 l 1431 3261 l 1448 3253 l 1467 3244 l 1486 3236 l
 1506 3228 l 1526 3220 l 1546 3212 l 1567 3205 l 1588 3197 l
 1609 3190 l 1632 3183 l 1655 3177 l 1673 3173 l 1692 3169 l
 1712 3165 l 1732 3161 l 1754 3157 l 1776 3154 l 1800 3150 l
 1823 3147 l 1847 3144 l 1872 3141 l 1897 3137 l 1921 3134 l
 1946 3131 l 1970 3129 l 1994 3126 l 2018 3123 l 2040 3120 l
 2062 3118 l 2083 3116 l 2104 3114 l 2123 3112 l 2142 3110 l
 2167 3108 l 2190 3107 l 2212 3105 l 2234 3104 l 2254 3103 l
 2273 3102 l 2293 3100 l 2311 3100 l 2330 3099 l 2348 3098 l
 2367 3098 l 2386 3099 l 2405 3100 l 2425 3102 l 2445 3106 l
 2465 3110 l 2483 3115 l 2502 3121 l 2521 3129 l 2543 3138 l
 2565 3148 l 2590 3160 l 2616 3173 l 2642 3187 l 2669 3202 l
 2695 3216 l 2719 3229 l 2740 3241 l 2758 3250 l 2771 3258 l
 2780 3263 l 2785 3266 l 2787 3267 l gs col0 s gr 
/Helvetica-Bold-iso ff 180.00 scf sf
2847 3178 m
gs 1 -1 sc (+0..impossible!) col0 sh gr
/Helvetica-Bold-iso ff 180.00 scf sf
1470 3744 m
gs 1 -1 sc (--+++) col0 sh gr
/Helvetica-Bold-iso ff 180.00 scf sf
1465 4148 m
gs 1 -1 sc (+-+++) col0 sh gr
/Helvetica-Bold-iso ff 180.00 scf sf
4105 3890 m
gs 1 -1 sc (0-+++) col0 sh gr
$F2psEnd
rs
end
